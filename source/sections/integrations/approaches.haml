---
layout: default
title: Integrations
---

.row
  .col-sm-12
    %h1 Integration
    %hr

.row
  .col-sm-12
    %p The approach of marrying the OAuth 2.0 protocol to sign2pay's secure mobile payments was dubbed internally as Authature.  The Authature protocol supports the standard <a href="https://tools.ietf.org/html/rfc6749#section-4.1">authorization code grant</a> type.

    %p In order to complete a purchase, you should implement the flow described below in your application.  For On-Demand payment integration, the flow <em>must</em> include these 3 sequential steps: requesting access permission, obtaining an access token, and requesting the payment.

.row
  .col-sm-12
    %ul#uidemo-tabs-default-demo.nav.nav-tabs
      %li.active
        %a{"data-toggle" => "tab", :href => "#request_access"}
          1. Requesting Access Permission

      %li
        %a{"data-toggle" => "tab", :href => "#access_grant"}
          2. Obtaining Access Token

      %li
        %a{"data-toggle" => "tab", :href => "#payment_request"}
          3. Requesting Payment

    .tab-content.tab-content-bordered

      #request_access.tab-pane.panel-padding.fade.active.in
        %h3 Request

        %p Authorization happens with or without a signature of your user.

        #accordion.panel-group
          .panel.panel-default
            .panel-heading
              .panel-title
                %a.accordion-toggle.collapsed{href: '#authorize-signature', data: {toggle: 'collapse', parent: '#accordion'}}
                  %h4
                    Obtaining an Authorization Code with your users' signature
              #authorize-signature.panel-collapse.collapse
                .panel-body
                  = partial 'authorize_signature'
          .panel.panel-default
            .panel-heading
              .panel-title
                %a.accordion-toggle.collapsed{href: '#authorize-no-signature', data: {toggle: 'collapse', parent: '#accordion'}}
                  %h4
                    Obtaining an Authorization Code without your users' signature
              #authorize-no-signature.panel-collapse.collapse
                .panel-body
                  = partial 'authorize_without_signature'

        %p For on-demand payments, you must include <code>client_id</code>, <code>response_type</code>, <code>redirect_uri</code>, <code>scope</code>, <code>state</code>, <code>amount</code>, and <code>ref_id</code> parameters with the GET request.
        %p It is important to note that Sign2Pay employs the idea of <i>Progressive Registration</i>. This means that you can provide as much or as little user detail that you have available at the time, and the Identification portion of the process will request the missing detail. You can provide additonal user detail when building your payment link by passing in the optional user_params object.

        .step

          %h3 Response

          %p Once the user authorizes access, the user is redirected back to the <b>redirect_uri</b> you originally specified.
          %p When the redirect uri represents a native application, the access grant is returned as a JSON object. Otherwise, the authorization code and state is appended to the redirect_uri as shown below.
          %p A successful authorization response will include the <code>code</code> and <code>state</code> params.  It will also include the optional <code>meta_data</code> if it was included in the original request.

          %h5 Native Example:
          %pre
            %code
              :preserve
                {
                  "code" : "829de1eb40385ebdfcc854e2ba94fb96",
                  "state" : "x3buLJqq3iAx3buLJqq3iA",
                  "meta_data" : { "promo" : "new_promo", "campaign" : "wintersale" }
                }
          %h5 Web Example:
          %pre
            %code
              :preserve
                https://example.com/oauth/redirect_uri?code=829de1eb40385ebdfcc854e2ba94fb96&state=x3buLJqq3iAx3buLJqq3iA&meta_data%5Bpromo%5D=new_promo&meta_data%5Bcampaign%5D=wintersale

          %p Either way, you'll need the access grant code in order to move onto the next step, exchanging it for an Access Token.

          .note.note-info
            The authorization code is short lived - it will expire within 120 seconds from creation.  It must be immediately transferred for an Access Token.

          .note.note-danger
            If there was an error in the authentication code request, your redirect_uri will receive a request containing the error and error_description params for you to parse. You can read more about handling errors <a href="/sections/integrations/errors.html">here</a>.

        .row
          .col-sm-12
            .step
              %h3 Next Step
              %a{:href => "#access_grant", :data => {:toggle => "tab" }}
                Obtaining an Access Token
                %span.fa.fa-chevron-right

      #access_grant.tab-pane.panel-padding.fade
        = partial 'access_grant'

      #payment_request.tab-pane.panel-padding.fade
        = partial 'payment_request'


:javascript
  s2p.sectionClass = "integrations";
  s2p.pageClass    = "approaches";

:scss
  .token_steps{
    margin-bottom:1em;
    .token_step{
      width:100%;
      display:block;
      border-radius: 4px;
      text-align:center;
    }
  }
  .approach{
    .panel{
      padding:0.5em;
      .panel-body{
        border-radius: 4px;
      }
    }
    .heading{
      font-size:1.4em;
      color: #1486BA;
      text-align:center;
    }

    .big-ass-icon{
      text-shadow: 0 2px 0 rgba(0, 0, 0, 0.15);
      color: rgba(212,219,223,1);
      line-height: 160px;
      font-size:160px;

      &.web{
       line-height: 160px;
        font-size:100px;
      }
    }
  }
